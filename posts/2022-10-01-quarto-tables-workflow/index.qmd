---
title: "My Approach to Tables in Quarto Documents"
date: 2022-10-01
categories: [quarto, rmarkdown, knitr, kableExtra, flextable]
---

Whenever possible I try to use graphs and plots to back up my story
  about data analysis. That said, sometimes you've just got use some
  data tables. That could be summary statistics, regression/ANOVA tables,
  or maybe wedding the visual aids by creating sparklines or mini-plots
  within a table. 
  
In 2022 there are no shortage of R libraries for making beautiful graphs
  and tables, but my most commonly used tools right now are kableExtra
  and flextable. gt looks promising but it's still fairly new. I've 
  tried using huxtable but for whatever reason it's never quite clicked
  with me. DT is a great library but I try to avoid it for rmarkdown/quarto
  documents due to how large it blows up HTML files. It's great when I
  need to include a full dataset in a report though, or in Shiny apps.
  
## HTML Tables

I am unaware of any pdf-exclusive r table libraries, but that doesn't mean they
  don't exist. All of the previously mentioned tables can produce HTML tables,
  but I really only use:
  
1. kableExtra
2. flextable
3. DT

mostly in that order.

```{r}
#| label: load-dplyr
#| message: false
library(dplyr)
```


### kableExtra

kableExtra is my go-to for HTML tables in my documents. I think the default 
  settings look pretty good, and it's easy to tweak them to get exactly what I
  want. 

```{r}
#| label: iris-kableExtra
#| tbl-cap: "Iris data - kableExtra"


iris |> 
  group_by(Species) |> 
  summarise(across(.fns=list(mean=mean, sd=sd))) |> 
  kableExtra::kbl(
    col.names = c("Species", rep(c("Mean", "SD"), 4)),
    digits=1
  ) |> 
  kableExtra::add_header_above(
    c(" ", 
      "Sepal Length"=2, 
      "Sepal Width"=2,
      "Petal Length"=2,
      "Petal Width"=2), 
    align = "c"
  ) |> 
  kableExtra::kable_styling(
    bootstrap_options = c("hover", "responsive")
  )

```

It's pretty easy to get a nice-looking table, and I really like the "hover"
  and "responsive" bootstrap options in `kableExtra::kable_styling()`. Hover
  gives a quasi-interactive feel to the table, without having to load all the 
  javascript required for sorting, filtering, etc. `DT` is better suited for
  that level of interactivity, but most tables probably don't need that. 
  
### flextable

Flextable also makes pretty nice HTML tables, but they are more static than 
  kableExtra's.
  
```{r}
#| label: iris-flextable
#| tbl-cap: "Iris data - flextable"

iris |> 
  group_by(Species) |> 
  summarise(across(.fns=list(mean=mean, sd=sd))) |> 
  flextable::flextable() |> 
  flextable::set_header_labels(
    Sepal.Length_mean = "Mean",
    Sepal.Length_sd = "SD",
    Sepal.Width_mean = "Mean",
    Sepal.Width_sd = "SD",
    Petal.Length_mean = "Mean",
    Petal.Length_sd = "SD",
    Petal.Width_mean = "Mean",
    Petal.Width_sd = "SD"
  ) |> 
  flextable::add_header_row(
    values=c("", "Sepal Length", "Sepal Width", "Petal Length", "Petal Width"),
    colwidths = c(1, 2, 2, 2, 2)
  ) |> 
  flextable::colformat_double(j=2:9, digits=1) |> 
  flextable::align(i=1, j=2:9, align="center", part="header")

```
  
### Some differences

One of the big differences between the 2 packages is how you make changes. 
  kableExtra, being based on knitr, leans towards to original R paradigm
  of a few functions with a lot of internal options, while flextable leans
  more towards to modern approach of several small functions that have a few options
  each. 
  Neither approach is better than the other. 
  With many small functions there are more commands that have to be remembered, 
  but they are usually named in a way that easily explains what they do, and they 
  are typically logicial to read and don't require memorizing (and maintaining!)
  as much documentation. One drawback is having to nest all of those functions, 
  or store output to variables over and over, but pipe functions (`|>` or `%>%`)
  have largely eliminate that problem. Now the only thing to watch for is 
  long strings of spaghetti code, but that's an issue regardless. 
  
  
### DT

DT is where I turn to in Shiny, or when I need to include a dataset as a table,
  but I try to avoid that.
  
```{r}
#| label: iris-DT
#| tbl-cap: "Iris data - DT"
iris |> 
  DT::datatable(
    caption = "Iris data- DT",
    filter="top") |> 
  DT::formatRound(1:4, digits = 1)
```

It's a pretty neat library, but I get overwhelmed with all of the options. 
  Especially since many of the options are set by passing HTML/CSS 
  and javascript code directly into the R code. Luckily there are some helpful
  guides from [Rstudio](https://rstudio.github.io/DT/) and from the 
  [authors](https://datatables.net/)
  
